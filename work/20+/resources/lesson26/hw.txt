В первом и втором задании использовать наследование от класса Thread.
В третьем и четвертом задании использовать реализацию интерфейса Runnable.

1.
Метод принимает 4 параметра: число, строку, число и boolean значение.

- Создает и запускает количество потоков равное первому числу.
- Все потоки в цикле печатают свое имя (имя потока) и строку .
- Цикл повторяется равное числу количество раз .
- В зависимости от boolean ваше метод печатает в конце слово “конец” после всех потоков или не дожидаясь их.
——————————————————————————————————-

2.
Метод принимает массив элементов (строк).
Метод должен создать файлы с названиями из этого массива (добавляет к названиям .txt).
Как он это делает:
Метод создает 4 потока, передает каждому из них массив и говорит каждому свой диапазон индексов для обработки (первому 0 - 10, второму 11 - 20 и тд), потоки в параллели создают эти файлы.
——————————————————————————————————-

3.
Метод принимает массив элементов (целых чисел).
Метод подсчитывает сумму всего массива.
Как он это делает:
Метод создает несколько потоков (в зависимости от длины массива. отдельный поток на каждые 1000 элементов). Делит между ними нагрузку. Потоки в конце выводят свои результаты в консоль. (в итоге мы увидим не сумму всего массива, а сумму которую насчитал каждый поток по отдельности).
———————————————————————————————————-

4.
Улучшить 3 задание:
Каждый поток принимает доп параметр (объект хранилище),  хранилище сохраняет текущий результат вычислений. Каждый поток ДОБАВЛЯЕТ в него свои результаты. В итоге все потоки добавляют в него свои кусочки и после их завершения мы получим общий результат.

В конце метода нужно вывести получившийся общий результат в консоль.
————————————————————————————————————

5.
Создать 2 потоковых класса ReadFileThread  и WriteFileThread.
ReadFileThread - читает построчно данные из файла from.txt , находящегося в корне вашего проекта
WriteFileThread - записывает построчно данные, прочитанные ReadFileThread-ом, в файл to.txt , находящийся в корне вашего проекта
В классе Runner запустить оба потока. После того, как все данные перепишутся из 1 потока в другой - программа завершается
и выводит на экран "Копирование завершено".

6.
Создать класс Shop (магазин одежды). Максимальо-возможное кол-во товаров, помещающихся в магазине - 50 штук.
Создать  потоковый класс CustomerThread  (покупатель) - который покупает товар в магазине (уменьшает кол-во имеющейся в магазине одежды на 1 еденицу)
Создать  потоковый класс ProviderThread  (поставщик) - который поставляет одежду в магазин (увеличивает кол-во имеющейся в магазине одежды на 10 едениц)
В классе Runner запустить 1000 потоков CustomerThread и 100 потоков CustomerThread.
Программа должна корректно работать(если товара в магазине нет - покупатель не может купить его,
а если магазин переполнет - поставщик не привозит новый) и звершаться.
