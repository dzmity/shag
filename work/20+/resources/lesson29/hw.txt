Разработать многопоточное приложение.
Использовать возможности, предоставляемые пакетом java.util.concurrent.
Не использовать слово synchronized.

CallCenter.
В организации работает 5 операторов + 1 старший оператор.
В обычном режиме старший оператор не работает, но может помочь, когда клиентов на линии слишком много,
и операторы не справляются с потоком звонков. Если помощь старшего в течении 5 секунд не нужна - он уходит
заниматься своими делами (спать в кабинет :-) ), до следующего "завала".

Оператор может обслуживать только одного клиента, остальные должны ждать своей очереди.
Возможности лини ограничены 15 ожидающими клиентами. При появлении 16-го ожидающего клиента
система должна отключать клиента, который дольше других "висит на линии" и ставить в очередь этого клиента.

В коллцентр обращаются от 50 до 100 клиентов (должно определяться в программе рандомно).
Каждый новый клиент должен появляться через интевал в 1 - 5 секунд (рандом) от появления предыдущего.
Разговор с оператором может занимать от 3 до 7 секунд (рандом). Если клиент ждет звонка более 5 - 10 секунд (рандом)
он кладет трубку. Но может набрать(а может и не набрать - рандом) опертаору снова черз 1-3 секунды (рандом) и уже не сбрасывать.

CallCenter работает до последнего клиента и закрывается.

Примечание:
Сущности клиент и оператор должны быть потоками.
Звонок - это "задача" от клиента в коллцентр.
Каждое уникальное действие - звонок, отмена звонка, очередной набор, создание клиента - должны сопровождаться
выводом соответствующей информации в консоль.
"Потюнить" значения всех рандомных интервалов, чтобы на протяжении вашей программы были как пики в работе центра
(когда системе приходится выбрасывать из очереди) так и простои.