Задача МАГАЗИН

Создать абстрактный класс Product, реализующий интерфейс Comparable
Поля (приватные):
- название (String)
- штрихкод (Integer)
- срок годности (LocalDate)
Методы:
- конструктор по умолчанию
- геттеры / сеттеры
- toString() - использовать все поля класса;
- equals() & hashCode() - использовать только штрихкод;
- compareTo(Product product) - сравнивать по дате от наименьшей к наибольшей (для дальнейшего использования в PriorityQueue)
+ метод isExpired() ("испорченный"), возвращающий true - если срок годности просрочен (меньше чем LocalDate.now())


Создать класс Milk, наследующий класс Product, представляющий из себя продукт "Молоко" в магазине
Поля (приватные):
- бренд ("Молочный мир", "Савушкин продукт" и т.д.)  (enum)
- тип тары (пакет, тетрапак, бутылка) (enum)
- объем (double)
Методы:
- конструктор по умолчанию
- геттеры / сеттеры
- toString() - использовать все поля класса + поля родительсого класса;
- equals() & hashCode()  - только штрихкод


Создать класс Bread, наследующий класс Product, представляющий из себя продукт "Хлеб" в магазине
Поля (приватные):
- нарезанный или нет (boolean)
- вес в граммах (int)
Методы:
- конструктор по умолчанию
- геттеры / сеттеры
- toString() - использовать все поля класса + поля родительсого класса;
- equals() & hashCode()  - использовать все поля класса + поля родительсого класса;


Создать класс CashMachine (кассовый аппарат), который будет содержать соответстия
штрихкод - цена товара в копейках (оба Integer)  (HashMap)
Поля (приватные):
- final Map pricesByCode  c инициализацией при объявлении (пустая)
Методы:
- конструктор по умолчанию
- геттер
- void addProductPrice(int code, int priceInCents) - метод добавляющий цену для соответствующего штрихкода


Создать класс Cart (корзина для продуктов)
Поля (приватные):
- final List<Product> products  c инициализацией при объявлении (пустой список)
Методы:
- конструктор по умолчанию
- геттер
- void addProductToCart(Product product) - метод добавляющий товар в корзину


Создать класс VillageShop (деревенский магазин), в котором есть 2 полки 1 - с молоком, 2-ая с хлебом
Поля (приватные):
- Queue<Milk> milkShell - приоритетная очередь(PriorityQueue) c инициализацией при объявлении (пустая);
- Queue<Bread> breadShell - приоритетная очередь(PriorityQueue) c инициализацией при объявлении (пустая);
Методы:
- конструктор по-умолчанию
- геттеры
- toString() - все поляя
- void addMilkToShell(Milk milk) - метод добавляющий молоко на полку
- void addBreadToShell(Bread bread) - метод добавляющий хлеб на полку

Создать класс CleverSeller "Умный продавец",
Поля:
- Имя
- магазин
- кассовый аппарат
Методы:
- конструктор со всеми полями
- toString()
- addProduct(Product product), добавляющий продукт на ту полку в магазине, какого типа продукт -
(молоко на полку с молоком в магазе, хлеб - на полку с хлебом)
- getMilkFromShell(), берущий молоко с наименьшим оставшимся сроком годности
- getBreadFromShell(), берущий хлеб с наименьшим оставшимся сроком годности
- calculateTotalCost(Cart cart) - метод принимающий на вход корзину с продуктами и возвращающий их общую стоимость
Если молоко либо хлеб испорчен уже - пишем в коноль "Простите, не заметил. Сча дам другое" и даем следующее с полки
Если продуктов больше нет - пишем в коносль - "Сори, закончилось."
Подсказка - (здесь не должно быть пробежки циклом по всем элементам на полке
нужно чтобы полка реализовывала приоритетную очередь, с сортировкой по дате.(если все правильно сделали выше - так и получится у вас)

В классе Runner в методе main()
создать 5 разных объектов класса Milk (с разным сроком годности и штрихкодом) (некоторые товары должны быть просрочены)
создать 5 разных объектов класса Bread (с разным сроком годности и штрихкодом) (некоторые товары должны быть просрочены)
создать кассу (штрихкоды продуктов и цены к ним)
создать магазин
создать продавца
Наполнить полки магазина созданными продуктами
создать корзину
Попросить продовца продать ему 2 молока и 3 хлеба и положить их в корзину
Дать продавцу посчитать сумму и вывести ее на экран






https://docs.google.com/document/d/1qeyUJjwBrux6mO74jQNaAoTlIEgR_i4HeGlJg-Nbz0Q/edit